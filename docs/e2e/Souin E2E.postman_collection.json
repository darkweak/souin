{
	"info": {
		"_postman_id": "90909e3a-0c86-4971-8be2-7f4c97352220",
		"name": "Souin E2E",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17806531"
	},
	"item": [
		{
			"name": "Beego",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('beego_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('beego_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Caddy",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Souin api",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.souinAPI.listKeys(pm, 'GET-http-localhost:4443-/test1', utils.getVar(pm, 'app_url'), '/test1')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}{{souin_base_api}}{{souin_api}}",
							"host": [
								"{{app_url}}{{souin_base_api}}{{souin_api}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Souin api GraphQL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.souinAPI.listGraphQLKeys(pm, 'POST-http-localhost:4443-/test1-4d08c8e90fed197693d96603c73fa6036e7ce42b8de0149cdd33b34e980631e2', utils.getVar(pm, 'app_url'), '/test1');"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"something\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}{{souin_base_api}}{{souin_api}}",
							"host": [
								"{{app_url}}{{souin_base_api}}{{souin_api}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Max age",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.validateAge(pm, 4, `${utils.getVar(pm, 'app_url')}/cache-maxage`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/cache-maxage",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"cache-maxage"
							]
						}
					},
					"response": []
				},
				{
					"name": "SMax age",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.validateAge(pm, 9, `${utils.getVar(pm, 'app_url')}/cache-s-maxage`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/cache-s-maxage",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"cache-s-maxage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Prometheus api",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Prometheus respond well.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Prometheus is populated.\", function () {",
									"    const result = pm.response.text();",
									"    pm.expect(result).to.include('souin_request_counter 7');",
									"//    pm.expect(result).to.include('souin_no_cached_response_counter 7');",
									"//    pm.expect(result).to.include('souin_cached_response_counter 3');",
									"//    pm.expect(result).to.include('souin_avg_response_time_count 7');",
									"//    pm.expect(result).to.include('souin_avg_response_time_sum 0');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}{{souin_base_api}}{{prometheus_api}}",
							"host": [
								"{{app_url}}{{souin_base_api}}{{prometheus_api}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Gzip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.validateAge(pm, 999, `${utils.getVar(pm, 'app_url')}/gzip`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/gzip",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"gzip"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.validateVary(pm, `${utils.getVar(pm, 'app_url')}/vary`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-something",
								"value": "should-vary-1",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/vary",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"vary"
							]
						}
					},
					"response": []
				},
				{
					"name": "304",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.validateAge(pm, 4, `${utils.getVar(pm, 'app_url')}/cache-maxage`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/cache-maxage",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"cache-maxage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Serve HTTP errored",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.serveHTTPError(pm, `${utils.getVar(pm, 'app_url')}/no-reverse-proxy`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-something",
								"value": "should-vary-1",
								"type": "text"
							},
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/no-reverse-proxy",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"no-reverse-proxy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`, 'no-store')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/test2`, '', false, true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/test2",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"test2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Surrogate Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const get_surrogate_url = key => ({",
									"    header: {",
									"        'Cache-Control': '',",
									"        'X-Surrogate-Key-Suffix': key,",
									"    },",
									"    method: 'GET',",
									"    url: `${utils.getVar(pm, 'app_url')}/surrogate-keys`,",
									"})",
									"const surrogate_api = (method, key = '') => ({",
									"    header: {",
									"        'Surrogate-Key': key,",
									"    },",
									"    method,",
									"    url: `${utils.getVar(pm, 'app_url')}${utils.getVar(pm, 'souin_base_api')}${utils.getVar(pm, 'souin_api')}${method != 'PURGE' ? '/surrogate_keys' : ''}`,",
									"})",
									"const KEYS = {",
									"    PREFIX: {",
									"        ONE: 'KEY-ONE',",
									"        TWO: 'KEY-TWO',",
									"    },",
									"    ONE: 'ONE',",
									"    TWO: 'TWO',",
									"}",
									"",
									"pm.test(\"Ensure no specific keys are stored\", function() {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[KEYS.PREFIX.ONE]).to.eql(undefined);",
									"    pm.expect(jsonData[KEYS.PREFIX.TWO]).to.eql(undefined);",
									"",
									"    pm.sendRequest(get_surrogate_url(KEYS.ONE), function(_, res) {",
									"        pm.expect(res).to.have.status(200);",
									"        pm.expect(res).to.have.header(\"Cache-Status\");",
									"        pm.expect(res).to.have.header(\"Surrogate-Key\");",
									"",
									"        pm.sendRequest(get_surrogate_url(KEYS.TWO), function(_, res) {",
									"            pm.expect(res).to.have.status(200);",
									"            pm.expect(res).to.have.header(\"Cache-Status\");",
									"            pm.expect(res).to.have.header(\"Surrogate-Key\");",
									"",
									"            pm.sendRequest(surrogate_api('GET'), function(_, res) {",
									"                pm.expect(res).to.have.status(200);",
									"                pm.expect(res).to.not.have.header(\"Cache-Status\");",
									"                let jd = res.json();",
									"                pm.expect(jd[KEYS.PREFIX.ONE]).to.eql(',GET-http-localhost%3A4443-%2Fsurrogate-keys%7B-VARY-%7DX-Surrogate-Key-Suffix%3AONE%3BAccept-Encoding%3Agzip%2C+deflate%2C+br');",
									"                pm.expect(jd[KEYS.PREFIX.TWO]).to.eql(',GET-http-localhost%3A4443-%2Fsurrogate-keys%7B-VARY-%7DX-Surrogate-Key-Suffix%3ATWO%3BAccept-Encoding%3Agzip%2C+deflate%2C+br');",
									"            })",
									"",
									"            pm.sendRequest(surrogate_api('PURGE', KEYS.PREFIX.ONE), function(_, res) {",
									"                pm.expect(res).to.have.status(204);",
									"            })",
									"            pm.sendRequest(surrogate_api('GET'), function(_, res) {",
									"                pm.expect(res).to.have.status(200);",
									"                pm.expect(res).to.not.have.header(\"Cache-Status\");",
									"                let jd = res.json();",
									"                pm.expect(jd[KEYS.PREFIX.ONE]).to.eql(undefined);",
									"                pm.expect(jd[KEYS.PREFIX.TWO]).to.eql(',GET-http-localhost%3A4443-%2Fsurrogate-keys%7B-VARY-%7DX-Surrogate-Key-Suffix%3ATWO%3BAccept-Encoding%3Agzip%2C+deflate%2C+br');",
									"            })",
									"            pm.sendRequest(surrogate_api('PURGE', `${KEYS.PREFIX.ONE}, ${KEYS.PREFIX.TWO}`), function(_, res) {",
									"                pm.expect(res).to.have.status(204);",
									"            })",
									"            pm.sendRequest(surrogate_api('GET'), function(_, res) {",
									"                pm.expect(res).to.have.status(200);",
									"                pm.expect(res).to.not.have.header(\"Cache-Status\");",
									"                let jd = res.json();",
									"                pm.expect(jd[KEYS.PREFIX.ONE]).to.eql(undefined);",
									"                pm.expect(jd[KEYS.PREFIX.TWO]).to.eql(undefined);",
									"            })",
									"        })",
									"    })",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Surrogate-Key",
								"value": "KEY-ONE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}{{souin_base_api}}{{souin_api}}/surrogate_keys",
							"host": [
								"{{app_url}}{{souin_base_api}}{{souin_api}}"
							],
							"path": [
								"surrogate_keys"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('caddy_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('caddy_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Chi",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('chi_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('chi_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Dotweb",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('dotweb_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('dotweb_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Echo",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('echo_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('echo_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Fiber",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('fiber_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('fiber_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Gin",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('gin_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('gin_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Go-zero",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('go-zero_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('go-zero_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Goyave",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('goyave_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('goyave_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Kratos",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('kratos_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('kratos_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Roadrunner",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('roadrunner_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('roadrunner_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Skipper",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('skipper_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('skipper_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Souin",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('souin_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('souin_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Traefik",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('traefik_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('traefik_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tyk",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/",
							"host": [
								"{{app_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/",
							"host": [
								"{{app_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/",
							"host": [
								"{{app_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The first excluded request must contain the Cache-Status HTTP response header without Age\", function () {",
									"    pm.response.to.have.header(\"Cache-Status\");",
									"    pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(\"Souin; fwd=uri-miss; detail=EXCLUDED-REQUEST-URI\");",
									"    pm.response.to.not.have.header(\"Age\");",
									"});",
									"pm.sendRequest(utils.request(`${utils.getVar(pm, 'app_url')}/excluded`), function (_, response) {",
									"    pm.test(\"The second excluded request must contain the Cache-Status HTTP response header without Age\", function () {",
									"        const expected = pm.expect(response);",
									"        expected.to.have.header(\"Cache-Status\");",
									"        pm.expect(response.headers.get(\"Cache-Status\")).to.eql(\"Souin; fwd=uri-miss; detail=EXCLUDED-REQUEST-URI\");",
									"        expected.to.not.have.header(\"Age\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('tyk_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('tyk_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Webgo",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.basicRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noCacheRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.noStoreRequest(pm, `${utils.getVar(pm, 'app_url')}/default`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/default",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.excludedRequest(pm, `${utils.getVar(pm, 'app_url')}/excluded`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/excluded",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set('app_url', pm.collectionVariables.get('webgo_url'))",
							"pm.collectionVariables.set('current_host', pm.collectionVariables.get('webgo_url').match(/^https?\\:\\/\\/([^\\/?#]+)(?:[\\/?#]|$)/i)[1])"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"    request: (url, cacheControl = '', body = null, headers = {}) => ({",
					"        header: {",
					"            'Cache-Control': cacheControl,",
					"            ...headers,",
					"        },",
					"        method: 'GET',",
					"        body,",
					"        url,",
					"    }),",
					"    getVar: (pm, v) => pm.collectionVariables.get(v) || '',",
					"    noStoreRequest: (pm, baseUrl = '') => {",
					"        pm.test(\"The first no-store request must contain the Cache-Status HTTP response header without Age\", function () {",
					"            pm.response.to.have.status(200);",
					"            pm.response.to.have.header(\"Cache-Status\");",
					"            pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; detail=NO-STORE-DIRECTIVE; key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}`);",
					"            pm.response.to.not.have.header(\"Age\");",
					"        });",
					"        pm.sendRequest(utils.request(baseUrl, 'no-store'), function (_, response) {",
					"            pm.test(\"The second no-store request must contain the Cache-Status HTTP response header without Age\", function () {",
					"                const expected = pm.expect(response);",
					"                expected.to.have.status(200);",
					"                expected.to.have.header(\"Cache-Status\");",
					"                pm.expect(response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; detail=NO-STORE-DIRECTIVE; key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}`);",
					"                expected.to.not.have.header(\"Age\");",
					"            });",
					"        });",
					"    },",
					"    noCacheRequest: (pm, baseUrl = '') => {",
					"        pm.test(\"The first no-cache request must contain the Cache-Status HTTP response header without Age\", function () {",
					"            pm.response.to.have.status(200);",
					"            pm.response.to.have.header(\"Cache-Status\");",
					"            pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; stored; key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}`);",
					"            pm.response.to.not.have.header(\"Age\");",
					"        });",
					"        pm.sendRequest(utils.request(baseUrl, 'no-cache'), function (_, response) {",
					"            pm.test(\"The second no-cache request must contain the Cache-Status HTTP response header without Age\", function () {",
					"                const expected = pm.expect(response);",
					"                expected.to.have.status(200);",
					"                expected.to.have.header(\"Cache-Status\");",
					"                pm.expect(response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; stored; key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}`);",
					"                expected.to.not.have.header(\"Age\");",
					"            });",
					"        });",
					"    },",
					"    excludedRequest: (pm, baseUrl = '') => {",
					"        pm.test(\"The first excluded request must contain the Cache-Status HTTP response header without Age\", function () {",
					"            pm.response.to.have.status(200);",
					"            pm.response.to.have.header(\"Cache-Status\");",
					"            pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(\"Souin; fwd=uri-miss; detail=EXCLUDED-REQUEST-URI\");",
					"            pm.response.to.not.have.header(\"Age\");",
					"        });",
					"        pm.sendRequest(utils.request(baseUrl), function (_, response) {",
					"            pm.test(\"The second excluded request must contain the Cache-Status HTTP response header without Age\", function () {",
					"                const expected = pm.expect(response);",
					"                expected.to.have.status(200);",
					"                expected.to.have.header(\"Cache-Status\");",
					"                pm.expect(response.headers.get(\"Cache-Status\")).to.eql(\"Souin; fwd=uri-miss; detail=EXCLUDED-REQUEST-URI\");",
					"                expected.to.not.have.header(\"Age\");",
					"            });",
					"        });",
					"    },",
					"    maxAgeRequest: (pm, baseUrl = '', max = 3, delay = 3) => {",
					"        pm.test(\"The first max-age request must contain the Cache-Status HTTP response header without Age\", function () {",
					"            pm.response.to.have.status(200);",
					"            pm.response.to.have.header(\"Cache-Status\");",
					"            pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; stored; key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}`);",
					"            pm.response.to.not.have.header(\"Age\");",
					"        });",
					"",
					"        Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, delay * 1000);",
					"        pm.sendRequest(utils.request(baseUrl, `max-age=${max}`), function (_, response) {",
					"            pm.test(\"The second max-age request must contain the Cache-Status HTTP response header\", function () {",
					"                const expected = pm.expect(response);",
					"                expected.to.have.status(200);",
					"                expected.to.have.header(\"Cache-Status\");",
					"",
					"                if (delay) {",
					"                    pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; stored; key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}`);",
					"                    expected.to.not.have.header(\"Age\");",
					"                } else {",
					"                    pm.expect(response.headers.get(\"Cache-Status\")).to.include(\"Souin; hit; ttl=\");",
					"                    expected.to.have.header(\"Age\");",
					"                }",
					"            });",
					"        });",
					"    },",
					"    excludedRequest: (pm, baseUrl = '') => {",
					"        pm.test(\"The first excluded request must contain the Cache-Status HTTP response header without Age\", function () {",
					"            pm.response.to.have.status(200);",
					"            pm.response.to.have.header(\"Cache-Status\");",
					"            pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; detail=EXCLUDED-REQUEST-URI`);",
					"            pm.response.to.not.have.header(\"Age\");",
					"        });",
					"        pm.sendRequest(utils.request(baseUrl), function (_, response) {",
					"            pm.test(\"The second excluded request must contain the Cache-Status HTTP response header without Age\", function () {",
					"                const expected = pm.expect(response);",
					"                expected.to.have.status(200);",
					"                expected.to.have.header(\"Cache-Status\");",
					"                pm.expect(response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; detail=EXCLUDED-REQUEST-URI`);",
					"                expected.to.not.have.header(\"Age\");",
					"            });",
					"        });",
					"    },",
					"    basicRequest: (pm, baseUrl = '') => {",
					"        pm.test(\"The first basic request must contain the Cache-Status HTTP response header without Age\", function () {",
					"            pm.response.to.have.status(200);",
					"            pm.response.to.have.header(\"Cache-Status\");",
					"            pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; stored; key=GET-http-${pm.collectionVariables.get('current_host')}-/${pm.request.url.path.join(\"/\")}`);",
					"            pm.response.to.not.have.header(\"Age\");",
					"        });",
					"        pm.sendRequest(utils.request(baseUrl), function (_, response) {",
					"            pm.test(\"The second basic request must contain the Cache-Status HTTP response header with Age\", function () {",
					"                const expected = pm.expect(response);",
					"                expected.to.have.status(200);",
					"                expected.to.have.header(\"Cache-Status\");",
					"                pm.expect(response.headers.get(\"Cache-Status\")).to.include(\"Souin; hit; ttl=\");",
					"                expected.to.have.header(\"Age\");",
					"            });",
					"        });",
					"    },",
					"    baseEndpoint: (pm, baseUrl = '', cacheControl = '', isStore = false, exclude = false) => {",
					"        pm.test(\"Status code is 200 with Cache-Status header\", function () {",
					"            pm.response.to.have.status(200);",
					"            if (exclude) {",
					"                pm.response.to.have.header(\"Cache-Status\");",
					"                pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(\"Souin; fwd=uri-miss; key=; detail=CANNOT-HANDLE\");",
					"            } else {",
					"                pm.response.to.have.header(\"Cache-Status\");",
					"                if (isStore) {",
					"                    pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; stored; key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}`);",
					"                } else {",
					"                    pm.response.to.have.header(\"Cache-Status\");",
					"                    pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; ${ cacheControl == \"no-store\" ? `key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}; detail=NOT-CACHEABLE` : 'key=; detail=CANNOT-HANDLE'}`);",
					"                }",
					"            }",
					"            pm.response.to.not.have.header(\"Age\");",
					"        });",
					"        pm.sendRequest(utils.request(baseUrl, cacheControl), function (_, response) {",
					"            pm.test(`Status code is 200, Cache-Status and Age are ${cacheControl === '' ? '' : 'not '}present`, function () {",
					"                    const expected = pm.expect(response);",
					"                    expected.to.have.status(200);",
					"                    if (exclude) {",
					"                        pm.response.to.have.header(\"Cache-Status\");",
					"                        pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(\"Souin; fwd=uri-miss; key=; detail=CANNOT-HANDLE\");",
					"                    } else {",
					"                        expected.to.have.header(\"Cache-Status\");",
					"",
					"                        if (cacheControl == '') {",
					"                            expected.to.have.header(\"Age\");",
					"                            pm.expect(response.headers.get(\"Cache-Status\")).to.include(\"Souin; hit; ttl=\");",
					"                        } else {",
					"                            expected.to.not.have.header(\"Age\");",
					"                            pm.expect(response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; ${ cacheControl == \"no-store\" ? `key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}; detail=NOT-CACHEABLE` : 'key=; detail=CANNOT-HANDLE'}`);",
					"                        }",
					"                    }",
					"                }",
					"            );",
					"        });",
					"    },",
					"    serveHTTPError: (pm, baseUrl = '') => {",
					"        pm.test(\"Status code is 502 with Cache-Status header\", function () {",
					"            pm.response.to.have.status(502);",
					"            pm.response.to.have.header(\"Cache-Status\");",
					"            pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; key=GET-http-${pm.collectionVariables.get('current_host')}-/no-reverse-proxy; detail=SERVE-HTTP-ERROR`);",
					"            pm.response.to.not.have.header(\"Age\");",
					"        });",
					"        pm.sendRequest(utils.request(baseUrl, ''), function (_, response) {",
					"            pm.test('Status code is 200, Cache-Status is present without Age', function () {",
					"                const expected = pm.expect(response);",
					"                expected.to.have.status(502);",
					"                expected.to.have.header(\"Cache-Status\");",
					"                pm.expect(response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; key=GET-http-${pm.collectionVariables.get('current_host')}-/no-reverse-proxy; detail=SERVE-HTTP-ERROR`);",
					"                pm.response.to.not.have.header(\"Age\");",
					"            });",
					"        });",
					"    },",
					"    validateAge: (pm, age, baseUrl = '') => {",
					"        pm.test(\"Status code is 200 with Cache-Status header\", function () {",
					"            pm.response.to.have.status(200);",
					"            pm.response.to.have.header(\"Cache-Status\");",
					"            pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; stored; key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}`);",
					"            pm.response.to.not.have.header(\"Age\");",
					"        });",
					"        pm.sendRequest(utils.request(baseUrl, ''), function (_, response) {",
					"            pm.test('Status code is 200, Cache-Status and Age are present', function () {",
					"                const expected = pm.expect(response);",
					"                expected.to.have.status(200);",
					"                expected.to.have.header(\"Cache-Status\");",
					"                expected.to.have.header(\"Age\");",
					"                pm.expect(response.headers.get(\"Cache-Status\")).to.include(\"Souin; hit; ttl=\"+age);",
					"            });",
					"        });",
					"    },",
					"    validateVary: (pm, baseUrl = '') => {",
					"        pm.test(\"Status code is 200 with Cache-Status header\", function () {",
					"            pm.response.to.have.status(200);",
					"            pm.response.to.have.header(\"Cache-Status\");",
					"            pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; stored; key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}`);",
					"            pm.response.to.not.have.header(\"Age\");",
					"            pm.expect(pm.response.text()).to.eql(\"Hello should-vary-1\");",
					"        });",
					"        const vary1 = utils.request(baseUrl, '', null, {'X-Something': 'should-vary-1'});",
					"        const vary2 = utils.request(baseUrl, '', null, {'X-Something': 'should-vary-2'});",
					"        pm.sendRequest(vary1, function (_, resVary1) {",
					"            pm.test('Status code is 200, Cache-Status and Age are present', function () {",
					"                const expected = pm.expect(resVary1);",
					"                expected.to.have.status(200);",
					"                expected.to.have.header(\"Cache-Status\");",
					"                expected.to.have.header(\"Age\");",
					"                pm.expect(resVary1.headers.get(\"Cache-Status\")).to.include(\"Souin; hit; ttl=14\");",
					"                pm.expect(resVary1.text()).to.eql(\"Hello should-vary-1\");",
					"            });",
					"",
					"",
					"            pm.sendRequest(vary2, function (_, resVary2Stored) {",
					"                pm.test(\"Status code is 200 with Cache-Status header\", function () {",
					"                    const expected = pm.expect(resVary2Stored);",
					"                    expected.to.have.status(200);",
					"                    expected.to.have.header(\"Cache-Status\");",
					"                    pm.expect(resVary2Stored.headers.get(\"Cache-Status\")).to.eql(`Souin; fwd=uri-miss; stored; key=GET-http-${pm.collectionVariables.get('current_host')}-${pm.request.url.getPath()}`);",
					"                    expected.to.not.have.header(\"Age\");",
					"                    pm.expect(resVary2Stored.text()).to.eql(\"Hello should-vary-2\");",
					"                });",
					"",
					"                pm.sendRequest(vary2, function (_, resVary2) {",
					"                    pm.test('Status code is 200, Cache-Status and Age are present', function () {",
					"                        const expected = pm.expect(resVary2);",
					"                        expected.to.have.status(200);",
					"                        expected.to.have.header(\"Cache-Status\");",
					"                        expected.to.have.header(\"Age\");",
					"                        pm.expect(resVary2.headers.get(\"Cache-Status\")).to.include(\"Souin; hit; ttl=14\");",
					"                        pm.expect(resVary2.text()).to.eql(\"Hello should-vary-2\");",
					"                    });",
					"                });",
					"            });",
					"        });",
					"    },",
					"    souinAPI: {",
					"        listKeys: (pm, baseKey, baseUrl = '', additionalPath = '', cacheControl = '') => {",
					"            const isCached = cacheControl == ''",
					"            pm.test(\"Ensure stored keys array is empty\", function () {",
					"                pm.response.to.have.status(200);",
					"                let jsonData = pm.response.json();",
					"                pm.expect(jsonData).to.eql([]);",
					"                pm.expect(jsonData.length).to.eql(0);",
					"            });",
					"            pm.sendRequest(utils.request(baseUrl + additionalPath, cacheControl), function(_, response) {",
					"                pm.expect(response).to.have.status(200);",
					"            });",
					"",
					"            ",
					"            pm.sendRequest(utils.request(`${baseUrl}${utils.getVar(pm, 'souin_base_api')}${utils.getVar(pm, 'souin_api')}`, cacheControl), function (_, res) {",
					"                pm.test(`Check Souin API has ${isCached ? 'two' : 'none'} registered key after the first cache set`, function () {",
					"                        pm.expect(res).to.have.status(200);",
					"                        let jsonData = res.json();",
					"                        pm.expect(jsonData.length).to.eql(isCached ? 2 : 0);",
					"                        pm.expect(jsonData[0]).to.eql(isCached ? baseKey : undefined);",
					"                    }",
					"                );",
					"",
					"                pm.sendRequest(utils.request(baseUrl + additionalPath + 'testing', cacheControl), function() {",
					"                    pm.sendRequest(utils.request(`${baseUrl}${utils.getVar(pm, 'souin_base_api')}${utils.getVar(pm, 'souin_api')}`, cacheControl), function (_, r) {",
					"                        pm.test(`Check Souin API has ${isCached ? 'four' : 'none'} registered key${isCached ? 's' : ''} after the second cache set`, function () {",
					"                            pm.expect(r).to.have.status(200);",
					"                            pm.expect(r).to.not.have.header(\"Cache-Status\");",
					"                            pm.expect(r).to.not.have.header(\"Age\");",
					"                            let jsonData = r.json();",
					"                            pm.expect(jsonData.length).to.eql(isCached ? 4 : 0);",
					"                        });",
					"                    });",
					"                });",
					"            });",
					"        },",
					"        listGraphQLKeys: (pm, baseKey, baseUrl = '', additionalPath = '', cacheControl = '') => {",
					"            const isCached = cacheControl == ''",
					"            const body = {",
					"                mode: \"raw\",",
					"                raw: JSON.stringify({\"query\":{\"mutation\": \"something\"}})",
					"            }",
					"            const rq = utils.request(baseUrl + additionalPath, '', body)",
					"            rq.method = \"POST\"",
					"            pm.test(\"Ensure stored keys array is empty\", function () {",
					"                pm.response.to.have.status(200);",
					"                let jsonData = pm.response.json();",
					"                pm.expect(jsonData).to.eql([]);",
					"                pm.expect(jsonData.length).to.eql(0);",
					"            });",
					"            pm.sendRequest(rq, function(_, response) {",
					"                pm.expect(response).to.have.status(200);",
					"            });",
					"",
					"            pm.sendRequest(utils.request(`${baseUrl}${utils.getVar(pm, 'souin_base_api')}${utils.getVar(pm, 'souin_api')}`, cacheControl), function (_, res) {",
					"                pm.test(`Check Souin API has ${isCached ? 'two' : 'none'} registered key after the first cache set`, function () {",
					"                        pm.expect(res).to.have.status(200);",
					"                        let jsonData = res.json();",
					"                        pm.expect(jsonData.length).to.eql(isCached ? 2 : 0);",
					"                        pm.expect(jsonData[0]).to.include(isCached ? baseKey : undefined);",
					"                    }",
					"                );",
					"",
					"                rq.url = baseUrl + additionalPath + 'testing'",
					"                pm.sendRequest(rq, function() {",
					"                    pm.sendRequest(utils.request(`${baseUrl}${utils.getVar(pm, 'souin_base_api')}${utils.getVar(pm, 'souin_api')}`, cacheControl), function (_, r) {",
					"                        pm.test(`Check Souin API has ${isCached ? 'four' : 'none'} registered key${isCached ? 's' : ''} after the second cache set`, function () {",
					"                            pm.expect(r).to.have.status(200);",
					"                            pm.expect(r).to.not.have.header(\"Cache-Status\");",
					"                            pm.expect(r).to.not.have.header(\"Age\");",
					"                            let jsonData = r.json();",
					"                            pm.expect(jsonData.length).to.eql(isCached ? 4 : 0);",
					"                        });",
					"                    });",
					"                });",
					"            });",
					"        },",
					"    },",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "caddy_url",
			"value": "http://localhost:4443"
		},
		{
			"key": "souin_api",
			"value": "/souin"
		},
		{
			"key": "souin_base_api",
			"value": "/souin-api"
		},
		{
			"key": "traefik_url",
			"value": "http://domain.com"
		},
		{
			"key": "tyk_url",
			"value": "http://localhost:4443/httpbin"
		},
		{
			"key": "echo_url",
			"value": "http://domain.com"
		},
		{
			"key": "gin_url",
			"value": "http://domain.com"
		},
		{
			"key": "skipper_url",
			"value": "http://domain.com"
		},
		{
			"key": "prometheus_api",
			"value": "/metrics"
		},
		{
			"key": "webgo_url",
			"value": "http://domain.com"
		},
		{
			"key": "chi_url",
			"value": "http://domain.com"
		},
		{
			"key": "fiber_url",
			"value": "http://domain.com"
		},
		{
			"key": "goyave_url",
			"value": "http://domain.com"
		},
		{
			"key": "souin_url",
			"value": "http://domain.com"
		},
		{
			"key": "dotweb_url",
			"value": "http://domain.com"
		},
		{
			"key": "go-zero_url",
			"value": "http://domain.com",
			"type": "string"
		},
		{
			"key": "app_url",
			"value": ""
		},
		{
			"key": "beego_url",
			"value": "http://domain.com",
			"type": "string"
		},
		{
			"key": "kratos_url",
			"value": "http://domain.com",
			"type": "string"
		},
		{
			"key": "roadrunner_url",
			"value": "http://domain.com",
			"type": "string"
		},
		{
			"key": "current_host",
			"value": ""
		}
	]
}