{
	"info": {
		"_postman_id": "fe4cc736-2b3c-4754-9701-64af0393af71",
		"name": "Souin E2E",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Caddy",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'caddy_url')}/default`, '', true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{caddy_url}}/default",
							"host": [
								"{{caddy_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Souin api",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.souinAPI.listKeys(pm, 'GET-localhost:4443-/test1', utils.getVar(pm, 'caddy_url'), '/test1')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{caddy_url}}{{souin_base_api}}{{souin_api}}",
							"host": [
								"{{caddy_url}}{{souin_base_api}}{{souin_api}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Prometheus api",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Prometheus respond well.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Prometheus is populated.\", function () {",
									"    const result = pm.response.text();",
									"    pm.expect(result).to.include('souin_request_counter 4');",
									"    pm.expect(result).to.include('souin_no_cached_response_counter 3');",
									"    pm.expect(result).to.include('souin_cached_response_counter 1');",
									"    pm.expect(result).to.include('souin_avg_response_time_count 3');",
									"    pm.expect(result).to.include('souin_avg_response_time_sum 0');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{caddy_url}}{{souin_base_api}}{{prometheus_api}}",
							"host": [
								"{{caddy_url}}{{souin_base_api}}{{prometheus_api}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'caddy_url')}/default`, 'no-cache')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{caddy_url}}/default",
							"host": [
								"{{caddy_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'caddy_url')}/default`, 'no-store')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{caddy_url}}/default",
							"host": [
								"{{caddy_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'caddy_url')}/test2`, '', false, true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{caddy_url}}/test2",
							"host": [
								"{{caddy_url}}"
							],
							"path": [
								"test2"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Echo",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'echo_url')}/default`, '', true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{echo_url}}/default",
							"host": [
								"{{echo_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'echo_url')}/default`, 'no-cache')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{echo_url}}/default",
							"host": [
								"{{echo_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'echo_url')}/default`, 'no-store')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{echo_url}}/default",
							"host": [
								"{{echo_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'echo_url')}/test2`, '', false, true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{echo_url}}/excluded",
							"host": [
								"{{echo_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Gin",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'gin_url')}/default`, '', true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{gin_url}}/default",
							"host": [
								"{{gin_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'gin_url')}/default`, 'no-cache')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gin_url}}/default",
							"host": [
								"{{gin_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'gin_url')}/default`, 'no-store')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{gin_url}}/default",
							"host": [
								"{{gin_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'gin_url')}/excluded`, '', false, true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{gin_url}}/excluded",
							"host": [
								"{{gin_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Skipper",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'skipper_url')}/default`, '', true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{skipper_url}}/default",
							"host": [
								"{{skipper_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'skipper_url')}/default`, 'no-cache')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{skipper_url}}/default",
							"host": [
								"{{skipper_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'skipper_url')}/default`, 'no-store')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-store",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{skipper_url}}/default",
							"host": [
								"{{skipper_url}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'skipper_url')}/excluded`, '', false, true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{skipper_url}}/excluded",
							"host": [
								"{{skipper_url}}"
							],
							"path": [
								"excluded"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Traefik",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, utils.getVar(pm, 'traefik_url'), '', true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{traefik_url}}",
							"host": [
								"{{traefik_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, utils.getVar(pm, 'traefik_url'), 'no-cache')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{traefik_url}}",
							"host": [
								"{{traefik_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, utils.getVar(pm, 'traefik_url'), 'no-store')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{traefik_url}}",
							"host": [
								"{{traefik_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclude regex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'traefik_url')}/test_exclude_another`, 'cache', false, true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{traefik_url}}/test_exclude_another",
							"host": [
								"{{traefik_url}}"
							],
							"path": [
								"test_exclude_another"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tyk",
			"item": [
				{
					"name": "Default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'tyk_url')}/`, '', true)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{tyk_url}}/",
							"host": [
								"{{tyk_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no cache",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'tyk_url')}/`, 'no-cache')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tyk_url}}/",
							"host": [
								"{{tyk_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Default no store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"utils.baseEndpoint(pm, `${utils.getVar(pm, 'tyk_url')}/`, 'no-store')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{tyk_url}}/",
							"host": [
								"{{tyk_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"    request: (url, cacheControl = '') => ({",
					"        header: {",
					"            'Cache-Control': cacheControl",
					"        },",
					"        method: 'GET',",
					"        url,",
					"    }),",
					"    getVar: (pm, v) => pm.collectionVariables.get(v) || '',",
					"    baseEndpoint: (pm, baseUrl = '', cacheControl = '', isStore = false, exclude = false) => {",
					"        pm.test(\"Status code is 200 with Cache-Status header\", function () {",
					"            pm.response.to.have.status(200);",
					"            if (exclude) {",
					"                pm.response.to.have.header(\"Cache-Status\");",
					"                pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(\"Souin; fwd=uri-miss\");",
					"            } else {",
					"                pm.response.to.have.header(\"Cache-Status\");",
					"                if (isStore) {",
					"                    pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(\"Souin; fwd=uri-miss; stored\");",
					"                } else {",
					"                    pm.response.to.have.header(\"Cache-Status\");",
					"                    pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(\"Souin; fwd=uri-miss\");",
					"                }",
					"            }",
					"            pm.response.to.not.have.header(\"Age\");",
					"        });",
					"        pm.sendRequest(utils.request(baseUrl, cacheControl), function (_, response) {",
					"            pm.test(`Status code is 200, Cache-Status and Age are ${cacheControl === '' ? '' : 'not '}present`, function () {",
					"                    const expected = pm.expect(response);",
					"                    expected.to.have.status(200);",
					"                    if (exclude) {",
					"                        pm.response.to.have.header(\"Cache-Status\");",
					"                        pm.expect(pm.response.headers.get(\"Cache-Status\")).to.eql(\"Souin; fwd=uri-miss\");",
					"                    } else {",
					"                        expected.to.have.header(\"Cache-Status\");",
					"",
					"                        if (cacheControl == '') {",
					"                            expected.to.have.header(\"Age\");",
					"                            pm.expect(response.headers.get(\"Cache-Status\")).to.include(\"Souin; hit; ttl=\");",
					"                        } else {",
					"                            expected.to.not.have.header(\"Age\");",
					"                            pm.expect(response.headers.get(\"Cache-Status\")).to.eql(\"Souin; fwd=uri-miss\");",
					"                        }",
					"                    }",
					"                }",
					"            );",
					"        });",
					"    },",
					"    souinAPI: {",
					"        listKeys: (pm, baseKey, baseUrl = '', additionalPath = '', cacheControl = '') => {",
					"            const isCached = cacheControl == ''",
					"            pm.test(\"Ensure stored keys array is empty\", function () {",
					"                pm.response.to.have.status(200);",
					"                let jsonData = pm.response.json();",
					"                pm.expect(jsonData).to.eql([]);",
					"                pm.expect(jsonData.length).to.eql(0);",
					"            });",
					"            pm.sendRequest(utils.request(baseUrl + additionalPath, cacheControl), function(_, response) {",
					"                pm.expect(response).to.have.status(200);",
					"            });",
					"",
					"            ",
					"            pm.sendRequest(utils.request(`${baseUrl}${utils.getVar(pm, 'souin_base_api')}${utils.getVar(pm, 'souin_api')}`, cacheControl), function (_, res) {",
					"                pm.test(`Check Souin API has ${isCached ? 'two' : 'none'} registered key after the first cache set`, function () {",
					"                        pm.expect(res).to.have.status(200);",
					"                        let jsonData = res.json();",
					"                        pm.expect(jsonData.length).to.eql(isCached ? 2 : 0);",
					"                        pm.expect(jsonData[0]).to.eql(isCached ? baseKey : undefined);",
					"                    }",
					"                );",
					"",
					"                pm.sendRequest(utils.request(baseUrl + additionalPath + 'testing', cacheControl), function() {",
					"                    pm.sendRequest(utils.request(`${baseUrl}${utils.getVar(pm, 'souin_base_api')}${utils.getVar(pm, 'souin_api')}`, cacheControl), function (_, r) {",
					"                        pm.test(`Check Souin API has ${isCached ? 'four' : 'none'} registered key${isCached ? 's' : ''} after the second cache set`, function () {",
					"                            pm.expect(r).to.have.status(200);",
					"                            pm.expect(r).to.not.have.header(\"Cache-Status\");",
					"                            pm.expect(r).to.not.have.header(\"Age\");",
					"                            let jsonData = r.json();",
					"                            pm.expect(jsonData.length).to.eql(isCached ? 4 : 0);",
					"                        });",
					"                    });",
					"                });",
					"            });",
					"        },",
					"    },",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "caddy_url",
			"value": "http://localhost:4443"
		},
		{
			"key": "souin_api",
			"value": "/souin"
		},
		{
			"key": "souin_base_api",
			"value": "/souin-api"
		},
		{
			"key": "traefik_url",
			"value": "http://domain.com"
		},
		{
			"key": "tyk_url",
			"value": "http://localhost:4443/httpbin"
		},
		{
			"key": "echo_url",
			"value": "http://domain.com"
		},
		{
			"key": "gin_url",
			"value": "http://domain.com"
		},
		{
			"key": "skipper_url",
			"value": "http://domain.com"
		},
		{
			"key": "prometheus_api",
			"value": "/metrics",
			"type": "string"
		}
	]
}